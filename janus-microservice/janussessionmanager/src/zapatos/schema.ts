/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.43), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import type {
  //@ts-ignore
  JSONValue,
  //@ts-ignore
  JSONArray,
  DateString,
  SQLFragment,
  //@ts-ignore
  SQL,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  ParentColumn,
  DefaultType
} from './src/core';

/* === schema: public === */

/* --- enums --- */

/* --- tables --- */

export namespace sessions {
  export type Table = 'sessions';
  export interface Selectable {
    deviceId: string;
    isStreaming: boolean;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    deviceId: string | SQLFragment;
    isStreaming: boolean | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'sessions_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = sessions.Table;
export type Selectable = sessions.Selectable;
export type Whereable = sessions.Whereable;
export type Insertable = sessions.Insertable;
export type Updatable = sessions.Updatable;
export type UniqueIndex = sessions.UniqueIndex;
export type Column = sessions.Column;
export type AllTables = [sessions.Table];

export type SelectableForTable<T extends Table> = {
  sessions: sessions.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  sessions: sessions.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  sessions: sessions.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  sessions: sessions.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  sessions: sessions.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  sessions: sessions.Column;
}[T];

export type SQLForTable<T extends Table> = {
  sessions: sessions.SQL;
}[T];
