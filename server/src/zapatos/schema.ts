/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.43), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import type {
  JSONValue,
  JSONArray,
  DateString,
  SQLFragment,
  SQL,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  ParentColumn,
  DefaultType
} from './src/core';

/* === schema: public === */

/* --- enums --- */

export type call_rating_enum = 'bad' | 'good';
export namespace every {
  export type call_rating_enum = ['bad', 'good'];
}
export type users_activities_enum =
  | 'new-follower'
  | 'post-comment'
  | 'post-reaction';
export namespace every {
  export type users_activities_enum = [
    'new-follower',
    'post-comment',
    'post-reaction'
  ];
}
export type users_devices_platform_enum = 'android' | 'ios';
export namespace every {
  export type users_devices_platform_enum = ['android', 'ios'];
}
export type users_gender_enum = 'F' | 'M' | 'O' | 'U';
export namespace every {
  export type users_gender_enum = ['F', 'M', 'O', 'U'];
}
export type users_posts_media_enum = 'image' | 'video';
export namespace every {
  export type users_posts_media_enum = ['image', 'video'];
}
export type users_reported_enum =
  | 'call'
  | 'post'
  | 'post-comment'
  | 'streamer-reports-viewer'
  | 'user'
  | 'viewer-reports-streamer';
export namespace every {
  export type users_reported_enum = [
    'call',
    'post',
    'post-comment',
    'streamer-reports-viewer',
    'user',
    'viewer-reports-streamer'
  ];
}
export type users_stream_reactions_enum = 'downvote' | 'upvote';
export namespace every {
  export type users_stream_reactions_enum = ['downvote', 'upvote'];
}

/* --- tables --- */

export namespace allowed_reaction_lookup {
  export type Table = 'allowed_reaction_lookup';
  export interface Selectable {
    reaction: string;
  }
  export interface Insertable {
    reaction: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'allowed_reaction_lookup_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace call_history {
  export type Table = 'call_history';
  export interface Selectable {
    id: string;
    callerId: string | null;
    callerDeviceId: string | null;
    callerRating: call_rating_enum | null;
    callerRatingDescription: string | null;
    calleeId: string | null;
    calleeDeviceId: string | null;
    calleeRating: call_rating_enum | null;
    calleeRatingDescription: string | null;
    createdAt: Date;
    updatedAt: Date;
    completedAt: Date;
    duration: number | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    callerId?: string | null | DefaultType | SQLFragment;
    callerDeviceId?: string | null | DefaultType | SQLFragment;
    callerRating?: call_rating_enum | null | DefaultType | SQLFragment;
    callerRatingDescription?: string | null | DefaultType | SQLFragment;
    calleeId?: string | null | DefaultType | SQLFragment;
    calleeDeviceId?: string | null | DefaultType | SQLFragment;
    calleeRating?: call_rating_enum | null | DefaultType | SQLFragment;
    calleeRatingDescription?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    completedAt?: Date | DateString | DefaultType | SQLFragment;
    duration?: number | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'call_history_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace deleted_users {
  export type Table = 'deleted_users';
  export interface Selectable {
    id: string;
    reason: string;
    birthdate: Date;
    gender: users_gender_enum;
    onboardingStep: number;
    settings: JSONValue;
    topics: string[];
    followers: number;
    following: number;
    blockedUsers: number;
    numCalls: number;
    numStreams: number;
    banned: boolean;
    createdAt: Date;
    updatedAt: Date;
    numPosts: number | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    reason: string | SQLFragment;
    birthdate: Date | DateString | SQLFragment;
    gender?: users_gender_enum | DefaultType | SQLFragment;
    onboardingStep: number | SQLFragment;
    settings?: JSONValue | DefaultType | SQLFragment;
    topics: string[] | SQLFragment;
    followers: number | SQLFragment;
    following: number | SQLFragment;
    blockedUsers: number | SQLFragment;
    numCalls: number | SQLFragment;
    numStreams: number | SQLFragment;
    banned: boolean | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    numPosts?: number | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'deleted_users_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace faqs {
  export type Table = 'faqs';
  export interface Selectable {
    id: string;
    question: string;
    answer: string;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    question: string | SQLFragment;
    answer: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'faqs_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace online_users {
  export type Table = 'online_users';
  export interface Selectable {
    deviceId: string;
    userId: string;
    socketId: string;
    isStreaming: boolean;
    streamTitle: string | null;
    thumbnail: string | null;
    isViewing: boolean;
    activeConnection: string | null;
    createdAt: Date;
    isWaiting: boolean | null;
    updatedAt: Date;
  }
  export interface Insertable {
    deviceId: string | SQLFragment;
    userId: string | SQLFragment;
    socketId: string | SQLFragment;
    isStreaming: boolean | SQLFragment;
    streamTitle?: string | null | DefaultType | SQLFragment;
    thumbnail?: string | null | DefaultType | SQLFragment;
    isViewing: boolean | SQLFragment;
    activeConnection?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    isWaiting?: boolean | null | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'online_users_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace reported_users {
  export type Table = 'reported_users';
  export interface Selectable {
    id: string;
    userId: string | null;
    reportedBy: string | null;
    reason: string;
    createdAt: Date;
    updatedAt: Date;
    type: users_reported_enum | null;
    metadata: JSONValue;
    reviewed: boolean;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    reportedBy?: string | null | DefaultType | SQLFragment;
    reason: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    type?: users_reported_enum | null | DefaultType | SQLFragment;
    metadata?: JSONValue | DefaultType | SQLFragment;
    reviewed?: boolean | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'reported_users_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace stream_history {
  export type Table = 'stream_history';
  export interface Selectable {
    id: string;
    userId: string | null;
    deviceId: string | null;
    title: string;
    thumbnail: string | null;
    liveViews: number;
    createdAt: Date;
    updatedAt: Date;
    uri: string | null;
    recordedViews: number;
    totalViews: number | null;
    completedAt: Date;
    duration: number | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    deviceId?: string | null | DefaultType | SQLFragment;
    title: string | SQLFragment;
    thumbnail?: string | null | DefaultType | SQLFragment;
    liveViews?: number | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    uri?: string | null | DefaultType | SQLFragment;
    recordedViews?: number | DefaultType | SQLFragment;
    totalViews?: number | null | DefaultType | SQLFragment;
    completedAt?: Date | DateString | DefaultType | SQLFragment;
    duration?: number | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'stream_history_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace topics {
  export type Table = 'topics';
  export interface Selectable {
    id: string;
    name: string;
    description: string | null;
    createdAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    name: string | SQLFragment;
    description?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'topics_pkey' | 'topics_name_key';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users {
  export type Table = 'users';
  export interface Selectable {
    id: string;
    firstName: string;
    lastName: string;
    username: string;
    email: string;
    password: string;
    birthdate: Date;
    gender: users_gender_enum;
    onboardingStep: number;
    resetPasswordToken: number | null;
    resetPasswordExpires: Date | null;
    settings: JSONValue;
    avatar: string | null;
    banned: boolean;
    createdAt: Date;
    updatedAt: Date;
    bio: string;
    fullName: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    firstName?: string | DefaultType | SQLFragment;
    lastName?: string | DefaultType | SQLFragment;
    username: string | SQLFragment;
    email: string | SQLFragment;
    password: string | SQLFragment;
    birthdate: Date | DateString | SQLFragment;
    gender?: users_gender_enum | DefaultType | SQLFragment;
    onboardingStep: number | SQLFragment;
    resetPasswordToken?: number | null | DefaultType | SQLFragment;
    resetPasswordExpires?: Date | DateString | null | DefaultType | SQLFragment;
    settings?: JSONValue | DefaultType | SQLFragment;
    avatar?: string | null | DefaultType | SQLFragment;
    banned: boolean | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    bio?: string | DefaultType | SQLFragment;
    fullName?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex =
    | 'users_pkey'
    | 'users_username_key'
    | 'users_email_key';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_activities {
  export type Table = 'users_activities';
  export interface Selectable {
    id: string;
    userId: string;
    type: users_activities_enum;
    viewed: boolean;
    createdAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    type: users_activities_enum | SQLFragment;
    viewed?: boolean | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_activities_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_activities_new_followers {
  export type Table = 'users_activities_new_followers';
  export interface Selectable {
    id: string;
    userId: string;
    type: users_activities_enum;
    viewed: boolean;
    createdAt: Date;
    followerId: string;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    type: users_activities_enum | SQLFragment;
    viewed?: boolean | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    followerId: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_activities_post_comments {
  export type Table = 'users_activities_post_comments';
  export interface Selectable {
    id: string;
    userId: string;
    type: users_activities_enum;
    viewed: boolean;
    createdAt: Date;
    postId: string;
    commenterId: string;
    postCommentId: string;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    type: users_activities_enum | SQLFragment;
    viewed?: boolean | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    postId: string | SQLFragment;
    commenterId: string | SQLFragment;
    postCommentId: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_activities_post_reactions {
  export type Table = 'users_activities_post_reactions';
  export interface Selectable {
    id: string;
    userId: string;
    type: users_activities_enum;
    viewed: boolean;
    createdAt: Date;
    postId: string;
    reacterId: string;
    reaction: string;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    type: users_activities_enum | SQLFragment;
    viewed?: boolean | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    postId: string | SQLFragment;
    reacterId: string | SQLFragment;
    reaction: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_activities_unread_count_total {
  export type Table = 'users_activities_unread_count_total';
  export interface Selectable {
    userId: string;
    count: number;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    count: number | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_activities_unread_count_total_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_blocklist {
  export type Table = 'users_blocklist';
  export interface Selectable {
    userId: string;
    blockedId: string;
    createdAt: Date | null;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    blockedId: string | SQLFragment;
    createdAt?: Date | DateString | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_blocklist_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations {
  export type Table = 'users_conversations';
  export interface Selectable {
    id: string;
    createdAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations_messages {
  export type Table = 'users_conversations_messages';
  export interface Selectable {
    id: string;
    userId: string;
    message: string;
    conversationId: string;
    createdAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    message: string | SQLFragment;
    conversationId: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_messages_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations_messages_unread_count_total {
  export type Table = 'users_conversations_messages_unread_count_total';
  export interface Selectable {
    userId: string;
    count: number;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    count: number | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_messages_unread_count_total_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations_participants {
  export type Table = 'users_conversations_participants';
  export interface Selectable {
    conversationId: string;
    userId: string;
    createdAt: Date;
  }
  export interface Insertable {
    conversationId: string | SQLFragment;
    userId: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_participants_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations_participants_messages_reactions {
  export type Table = 'users_conversations_participants_messages_reactions';
  export interface Selectable {
    userId: string;
    messageId: string;
    reaction: string;
    conversationId: string;
    createdAt: Date;
    deleted: boolean;
    updatedAt: Date;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    messageId: string | SQLFragment;
    reaction: string | SQLFragment;
    conversationId: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    deleted?: boolean | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_participants_messages_reactions_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations_participants_messages_reactions_total {
  export type Table = 'users_conversations_participants_messages_reactions_total';
  export interface Selectable {
    messageId: string;
    reaction: string;
    conversationId: string;
    count: number | null;
  }
  export interface Insertable {
    messageId: string | SQLFragment;
    reaction: string | SQLFragment;
    conversationId: string | SQLFragment;
    count?: number | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_participants_messages_reactions_total_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_conversations_participants_messages_statuses {
  export type Table = 'users_conversations_participants_messages_statuses';
  export interface Selectable {
    messageId: string;
    userId: string;
    conversationId: string;
    read: boolean;
    readAt: Date | null;
  }
  export interface Insertable {
    messageId: string | SQLFragment;
    userId: string | SQLFragment;
    conversationId: string | SQLFragment;
    read?: boolean | DefaultType | SQLFragment;
    readAt?: Date | DateString | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_conversations_participants_messages_statuses_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_devices {
  export type Table = 'users_devices';
  export interface Selectable {
    deviceId: string;
    userId: string | null;
    platform: users_devices_platform_enum;
    appVersion: string;
    codePushVersion: string | null;
    systemModel: string;
    systemVersion: string;
    notificationToken: string | null;
    createdAt: Date;
    updatedAt: Date;
    id: string;
  }
  export interface Insertable {
    deviceId: string | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    platform: users_devices_platform_enum | SQLFragment;
    appVersion: string | SQLFragment;
    codePushVersion?: string | null | DefaultType | SQLFragment;
    systemModel: string | SQLFragment;
    systemVersion: string | SQLFragment;
    notificationToken?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    id?: string | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex =
    | 'users_devices_pkey'
    | 'users_devices_userId_deviceId_idx';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_followers {
  export type Table = 'users_followers';
  export interface Selectable {
    userId: string;
    followerId: string;
    createdAt: Date | null;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    followerId: string | SQLFragment;
    createdAt?: Date | DateString | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_followers_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_live_streams_viewers {
  export type Table = 'users_live_streams_viewers';
  export interface Selectable {
    userId: string | null;
    streamId: string;
    createdAt: Date;
    id: string;
  }
  export interface Insertable {
    userId?: string | null | DefaultType | SQLFragment;
    streamId: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    id?: string | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_stream_viewers_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_posts {
  export type Table = 'users_posts';
  export interface Selectable {
    id: string;
    userId: string;
    description: string | null;
    edited: boolean;
    banned: boolean;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    description?: string | null | DefaultType | SQLFragment;
    edited?: boolean | DefaultType | SQLFragment;
    banned?: boolean | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_posts_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_posts_comments {
  export type Table = 'users_posts_comments';
  export interface Selectable {
    id: string;
    postId: string;
    userId: string;
    comment: string;
    createdAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    postId: string | SQLFragment;
    userId: string | SQLFragment;
    comment: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_posts_comments_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_posts_comments_total {
  export type Table = 'users_posts_comments_total';
  export interface Selectable {
    postId: string;
    count: number | null;
  }
  export interface Insertable {
    postId: string | SQLFragment;
    count?: number | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_posts_comments_total_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_posts_media {
  export type Table = 'users_posts_media';
  export interface Selectable {
    id: string;
    postId: string;
    type: users_posts_media_enum;
    position: number;
    uri: string;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    postId: string | SQLFragment;
    type: users_posts_media_enum | SQLFragment;
    position: number | SQLFragment;
    uri: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_posts_media_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_posts_reactions {
  export type Table = 'users_posts_reactions';
  export interface Selectable {
    userId: string;
    postId: string;
    reaction: string;
    createdAt: Date;
    deleted: boolean;
    updatedAt: Date;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    postId: string | SQLFragment;
    reaction: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    deleted?: boolean | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_posts_reactions_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_posts_reactions_total {
  export type Table = 'users_posts_reactions_total';
  export interface Selectable {
    postId: string;
    reaction: string;
    count: number;
  }
  export interface Insertable {
    postId: string | SQLFragment;
    reaction: string | SQLFragment;
    count: number | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_posts_reactions_total_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_recorded_streams_viewers {
  export type Table = 'users_recorded_streams_viewers';
  export interface Selectable {
    id: string;
    userId: string;
    streamId: string;
    createdAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId: string | SQLFragment;
    streamId: string | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_recorded_streams_viewers_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_streams_reactions {
  export type Table = 'users_streams_reactions';
  export interface Selectable {
    userId: string;
    streamId: string;
    reaction: users_stream_reactions_enum;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    streamId: string | SQLFragment;
    reaction: users_stream_reactions_enum | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_streams_reactions_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_streams_reactions_total {
  export type Table = 'users_streams_reactions_total';
  export interface Selectable {
    streamId: string;
    reaction: users_stream_reactions_enum;
    count: number;
  }
  export interface Insertable {
    streamId: string | SQLFragment;
    reaction: users_stream_reactions_enum | SQLFragment;
    count: number | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_streams_reactions_total_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace users_topics {
  export type Table = 'users_topics';
  export interface Selectable {
    userId: string;
    topicId: string;
  }
  export interface Insertable {
    userId: string | SQLFragment;
    topicId: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> {}
  export type Whereable = {
    [K in keyof Insertable]?: Exclude<
      Insertable[K] | ParentColumn,
      null | DefaultType
    >;
  };
  export type JSONSelectable = {
    [K in keyof Selectable]: Date extends Selectable[K]
      ? Exclude<Selectable[K], Date> | DateString
      : Date[] extends Selectable[K]
      ? Exclude<Selectable[K], Date[]> | DateString[]
      : Selectable[K];
  };
  export type UniqueIndex = 'users_topics_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<
    Selectable,
    T[number]
  >;
  export type SQLExpression =
    | GenericSQLExpression
    | Table
    | Whereable
    | Column
    | ColumnNames<Updatable | (keyof Updatable)[]>
    | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table =
  | allowed_reaction_lookup.Table
  | call_history.Table
  | deleted_users.Table
  | faqs.Table
  | online_users.Table
  | reported_users.Table
  | stream_history.Table
  | topics.Table
  | users.Table
  | users_activities.Table
  | users_activities_new_followers.Table
  | users_activities_post_comments.Table
  | users_activities_post_reactions.Table
  | users_activities_unread_count_total.Table
  | users_blocklist.Table
  | users_conversations.Table
  | users_conversations_messages.Table
  | users_conversations_messages_unread_count_total.Table
  | users_conversations_participants.Table
  | users_conversations_participants_messages_reactions.Table
  | users_conversations_participants_messages_reactions_total.Table
  | users_conversations_participants_messages_statuses.Table
  | users_devices.Table
  | users_followers.Table
  | users_live_streams_viewers.Table
  | users_posts.Table
  | users_posts_comments.Table
  | users_posts_comments_total.Table
  | users_posts_media.Table
  | users_posts_reactions.Table
  | users_posts_reactions_total.Table
  | users_recorded_streams_viewers.Table
  | users_streams_reactions.Table
  | users_streams_reactions_total.Table
  | users_topics.Table;
export type Selectable =
  | allowed_reaction_lookup.Selectable
  | call_history.Selectable
  | deleted_users.Selectable
  | faqs.Selectable
  | online_users.Selectable
  | reported_users.Selectable
  | stream_history.Selectable
  | topics.Selectable
  | users.Selectable
  | users_activities.Selectable
  | users_activities_new_followers.Selectable
  | users_activities_post_comments.Selectable
  | users_activities_post_reactions.Selectable
  | users_activities_unread_count_total.Selectable
  | users_blocklist.Selectable
  | users_conversations.Selectable
  | users_conversations_messages.Selectable
  | users_conversations_messages_unread_count_total.Selectable
  | users_conversations_participants.Selectable
  | users_conversations_participants_messages_reactions.Selectable
  | users_conversations_participants_messages_reactions_total.Selectable
  | users_conversations_participants_messages_statuses.Selectable
  | users_devices.Selectable
  | users_followers.Selectable
  | users_live_streams_viewers.Selectable
  | users_posts.Selectable
  | users_posts_comments.Selectable
  | users_posts_comments_total.Selectable
  | users_posts_media.Selectable
  | users_posts_reactions.Selectable
  | users_posts_reactions_total.Selectable
  | users_recorded_streams_viewers.Selectable
  | users_streams_reactions.Selectable
  | users_streams_reactions_total.Selectable
  | users_topics.Selectable;
export type Whereable =
  | allowed_reaction_lookup.Whereable
  | call_history.Whereable
  | deleted_users.Whereable
  | faqs.Whereable
  | online_users.Whereable
  | reported_users.Whereable
  | stream_history.Whereable
  | topics.Whereable
  | users.Whereable
  | users_activities.Whereable
  | users_activities_new_followers.Whereable
  | users_activities_post_comments.Whereable
  | users_activities_post_reactions.Whereable
  | users_activities_unread_count_total.Whereable
  | users_blocklist.Whereable
  | users_conversations.Whereable
  | users_conversations_messages.Whereable
  | users_conversations_messages_unread_count_total.Whereable
  | users_conversations_participants.Whereable
  | users_conversations_participants_messages_reactions.Whereable
  | users_conversations_participants_messages_reactions_total.Whereable
  | users_conversations_participants_messages_statuses.Whereable
  | users_devices.Whereable
  | users_followers.Whereable
  | users_live_streams_viewers.Whereable
  | users_posts.Whereable
  | users_posts_comments.Whereable
  | users_posts_comments_total.Whereable
  | users_posts_media.Whereable
  | users_posts_reactions.Whereable
  | users_posts_reactions_total.Whereable
  | users_recorded_streams_viewers.Whereable
  | users_streams_reactions.Whereable
  | users_streams_reactions_total.Whereable
  | users_topics.Whereable;
export type Insertable =
  | allowed_reaction_lookup.Insertable
  | call_history.Insertable
  | deleted_users.Insertable
  | faqs.Insertable
  | online_users.Insertable
  | reported_users.Insertable
  | stream_history.Insertable
  | topics.Insertable
  | users.Insertable
  | users_activities.Insertable
  | users_activities_new_followers.Insertable
  | users_activities_post_comments.Insertable
  | users_activities_post_reactions.Insertable
  | users_activities_unread_count_total.Insertable
  | users_blocklist.Insertable
  | users_conversations.Insertable
  | users_conversations_messages.Insertable
  | users_conversations_messages_unread_count_total.Insertable
  | users_conversations_participants.Insertable
  | users_conversations_participants_messages_reactions.Insertable
  | users_conversations_participants_messages_reactions_total.Insertable
  | users_conversations_participants_messages_statuses.Insertable
  | users_devices.Insertable
  | users_followers.Insertable
  | users_live_streams_viewers.Insertable
  | users_posts.Insertable
  | users_posts_comments.Insertable
  | users_posts_comments_total.Insertable
  | users_posts_media.Insertable
  | users_posts_reactions.Insertable
  | users_posts_reactions_total.Insertable
  | users_recorded_streams_viewers.Insertable
  | users_streams_reactions.Insertable
  | users_streams_reactions_total.Insertable
  | users_topics.Insertable;
export type Updatable =
  | allowed_reaction_lookup.Updatable
  | call_history.Updatable
  | deleted_users.Updatable
  | faqs.Updatable
  | online_users.Updatable
  | reported_users.Updatable
  | stream_history.Updatable
  | topics.Updatable
  | users.Updatable
  | users_activities.Updatable
  | users_activities_new_followers.Updatable
  | users_activities_post_comments.Updatable
  | users_activities_post_reactions.Updatable
  | users_activities_unread_count_total.Updatable
  | users_blocklist.Updatable
  | users_conversations.Updatable
  | users_conversations_messages.Updatable
  | users_conversations_messages_unread_count_total.Updatable
  | users_conversations_participants.Updatable
  | users_conversations_participants_messages_reactions.Updatable
  | users_conversations_participants_messages_reactions_total.Updatable
  | users_conversations_participants_messages_statuses.Updatable
  | users_devices.Updatable
  | users_followers.Updatable
  | users_live_streams_viewers.Updatable
  | users_posts.Updatable
  | users_posts_comments.Updatable
  | users_posts_comments_total.Updatable
  | users_posts_media.Updatable
  | users_posts_reactions.Updatable
  | users_posts_reactions_total.Updatable
  | users_recorded_streams_viewers.Updatable
  | users_streams_reactions.Updatable
  | users_streams_reactions_total.Updatable
  | users_topics.Updatable;
export type UniqueIndex =
  | allowed_reaction_lookup.UniqueIndex
  | call_history.UniqueIndex
  | deleted_users.UniqueIndex
  | faqs.UniqueIndex
  | online_users.UniqueIndex
  | reported_users.UniqueIndex
  | stream_history.UniqueIndex
  | topics.UniqueIndex
  | users.UniqueIndex
  | users_activities.UniqueIndex
  | users_activities_new_followers.UniqueIndex
  | users_activities_post_comments.UniqueIndex
  | users_activities_post_reactions.UniqueIndex
  | users_activities_unread_count_total.UniqueIndex
  | users_blocklist.UniqueIndex
  | users_conversations.UniqueIndex
  | users_conversations_messages.UniqueIndex
  | users_conversations_messages_unread_count_total.UniqueIndex
  | users_conversations_participants.UniqueIndex
  | users_conversations_participants_messages_reactions.UniqueIndex
  | users_conversations_participants_messages_reactions_total.UniqueIndex
  | users_conversations_participants_messages_statuses.UniqueIndex
  | users_devices.UniqueIndex
  | users_followers.UniqueIndex
  | users_live_streams_viewers.UniqueIndex
  | users_posts.UniqueIndex
  | users_posts_comments.UniqueIndex
  | users_posts_comments_total.UniqueIndex
  | users_posts_media.UniqueIndex
  | users_posts_reactions.UniqueIndex
  | users_posts_reactions_total.UniqueIndex
  | users_recorded_streams_viewers.UniqueIndex
  | users_streams_reactions.UniqueIndex
  | users_streams_reactions_total.UniqueIndex
  | users_topics.UniqueIndex;
export type Column =
  | allowed_reaction_lookup.Column
  | call_history.Column
  | deleted_users.Column
  | faqs.Column
  | online_users.Column
  | reported_users.Column
  | stream_history.Column
  | topics.Column
  | users.Column
  | users_activities.Column
  | users_activities_new_followers.Column
  | users_activities_post_comments.Column
  | users_activities_post_reactions.Column
  | users_activities_unread_count_total.Column
  | users_blocklist.Column
  | users_conversations.Column
  | users_conversations_messages.Column
  | users_conversations_messages_unread_count_total.Column
  | users_conversations_participants.Column
  | users_conversations_participants_messages_reactions.Column
  | users_conversations_participants_messages_reactions_total.Column
  | users_conversations_participants_messages_statuses.Column
  | users_devices.Column
  | users_followers.Column
  | users_live_streams_viewers.Column
  | users_posts.Column
  | users_posts_comments.Column
  | users_posts_comments_total.Column
  | users_posts_media.Column
  | users_posts_reactions.Column
  | users_posts_reactions_total.Column
  | users_recorded_streams_viewers.Column
  | users_streams_reactions.Column
  | users_streams_reactions_total.Column
  | users_topics.Column;
export type AllTables = [
  allowed_reaction_lookup.Table,
  call_history.Table,
  deleted_users.Table,
  faqs.Table,
  online_users.Table,
  reported_users.Table,
  stream_history.Table,
  topics.Table,
  users.Table,
  users_activities.Table,
  users_activities_new_followers.Table,
  users_activities_post_comments.Table,
  users_activities_post_reactions.Table,
  users_activities_unread_count_total.Table,
  users_blocklist.Table,
  users_conversations.Table,
  users_conversations_messages.Table,
  users_conversations_messages_unread_count_total.Table,
  users_conversations_participants.Table,
  users_conversations_participants_messages_reactions.Table,
  users_conversations_participants_messages_reactions_total.Table,
  users_conversations_participants_messages_statuses.Table,
  users_devices.Table,
  users_followers.Table,
  users_live_streams_viewers.Table,
  users_posts.Table,
  users_posts_comments.Table,
  users_posts_comments_total.Table,
  users_posts_media.Table,
  users_posts_reactions.Table,
  users_posts_reactions_total.Table,
  users_recorded_streams_viewers.Table,
  users_streams_reactions.Table,
  users_streams_reactions_total.Table,
  users_topics.Table
];

export type SelectableForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.Selectable;
  call_history: call_history.Selectable;
  deleted_users: deleted_users.Selectable;
  faqs: faqs.Selectable;
  online_users: online_users.Selectable;
  reported_users: reported_users.Selectable;
  stream_history: stream_history.Selectable;
  topics: topics.Selectable;
  users: users.Selectable;
  users_activities: users_activities.Selectable;
  users_activities_new_followers: users_activities_new_followers.Selectable;
  users_activities_post_comments: users_activities_post_comments.Selectable;
  users_activities_post_reactions: users_activities_post_reactions.Selectable;
  users_activities_unread_count_total: users_activities_unread_count_total.Selectable;
  users_blocklist: users_blocklist.Selectable;
  users_conversations: users_conversations.Selectable;
  users_conversations_messages: users_conversations_messages.Selectable;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.Selectable;
  users_conversations_participants: users_conversations_participants.Selectable;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.Selectable;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.Selectable;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.Selectable;
  users_devices: users_devices.Selectable;
  users_followers: users_followers.Selectable;
  users_live_streams_viewers: users_live_streams_viewers.Selectable;
  users_posts: users_posts.Selectable;
  users_posts_comments: users_posts_comments.Selectable;
  users_posts_comments_total: users_posts_comments_total.Selectable;
  users_posts_media: users_posts_media.Selectable;
  users_posts_reactions: users_posts_reactions.Selectable;
  users_posts_reactions_total: users_posts_reactions_total.Selectable;
  users_recorded_streams_viewers: users_recorded_streams_viewers.Selectable;
  users_streams_reactions: users_streams_reactions.Selectable;
  users_streams_reactions_total: users_streams_reactions_total.Selectable;
  users_topics: users_topics.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.Whereable;
  call_history: call_history.Whereable;
  deleted_users: deleted_users.Whereable;
  faqs: faqs.Whereable;
  online_users: online_users.Whereable;
  reported_users: reported_users.Whereable;
  stream_history: stream_history.Whereable;
  topics: topics.Whereable;
  users: users.Whereable;
  users_activities: users_activities.Whereable;
  users_activities_new_followers: users_activities_new_followers.Whereable;
  users_activities_post_comments: users_activities_post_comments.Whereable;
  users_activities_post_reactions: users_activities_post_reactions.Whereable;
  users_activities_unread_count_total: users_activities_unread_count_total.Whereable;
  users_blocklist: users_blocklist.Whereable;
  users_conversations: users_conversations.Whereable;
  users_conversations_messages: users_conversations_messages.Whereable;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.Whereable;
  users_conversations_participants: users_conversations_participants.Whereable;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.Whereable;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.Whereable;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.Whereable;
  users_devices: users_devices.Whereable;
  users_followers: users_followers.Whereable;
  users_live_streams_viewers: users_live_streams_viewers.Whereable;
  users_posts: users_posts.Whereable;
  users_posts_comments: users_posts_comments.Whereable;
  users_posts_comments_total: users_posts_comments_total.Whereable;
  users_posts_media: users_posts_media.Whereable;
  users_posts_reactions: users_posts_reactions.Whereable;
  users_posts_reactions_total: users_posts_reactions_total.Whereable;
  users_recorded_streams_viewers: users_recorded_streams_viewers.Whereable;
  users_streams_reactions: users_streams_reactions.Whereable;
  users_streams_reactions_total: users_streams_reactions_total.Whereable;
  users_topics: users_topics.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.Insertable;
  call_history: call_history.Insertable;
  deleted_users: deleted_users.Insertable;
  faqs: faqs.Insertable;
  online_users: online_users.Insertable;
  reported_users: reported_users.Insertable;
  stream_history: stream_history.Insertable;
  topics: topics.Insertable;
  users: users.Insertable;
  users_activities: users_activities.Insertable;
  users_activities_new_followers: users_activities_new_followers.Insertable;
  users_activities_post_comments: users_activities_post_comments.Insertable;
  users_activities_post_reactions: users_activities_post_reactions.Insertable;
  users_activities_unread_count_total: users_activities_unread_count_total.Insertable;
  users_blocklist: users_blocklist.Insertable;
  users_conversations: users_conversations.Insertable;
  users_conversations_messages: users_conversations_messages.Insertable;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.Insertable;
  users_conversations_participants: users_conversations_participants.Insertable;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.Insertable;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.Insertable;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.Insertable;
  users_devices: users_devices.Insertable;
  users_followers: users_followers.Insertable;
  users_live_streams_viewers: users_live_streams_viewers.Insertable;
  users_posts: users_posts.Insertable;
  users_posts_comments: users_posts_comments.Insertable;
  users_posts_comments_total: users_posts_comments_total.Insertable;
  users_posts_media: users_posts_media.Insertable;
  users_posts_reactions: users_posts_reactions.Insertable;
  users_posts_reactions_total: users_posts_reactions_total.Insertable;
  users_recorded_streams_viewers: users_recorded_streams_viewers.Insertable;
  users_streams_reactions: users_streams_reactions.Insertable;
  users_streams_reactions_total: users_streams_reactions_total.Insertable;
  users_topics: users_topics.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.Updatable;
  call_history: call_history.Updatable;
  deleted_users: deleted_users.Updatable;
  faqs: faqs.Updatable;
  online_users: online_users.Updatable;
  reported_users: reported_users.Updatable;
  stream_history: stream_history.Updatable;
  topics: topics.Updatable;
  users: users.Updatable;
  users_activities: users_activities.Updatable;
  users_activities_new_followers: users_activities_new_followers.Updatable;
  users_activities_post_comments: users_activities_post_comments.Updatable;
  users_activities_post_reactions: users_activities_post_reactions.Updatable;
  users_activities_unread_count_total: users_activities_unread_count_total.Updatable;
  users_blocklist: users_blocklist.Updatable;
  users_conversations: users_conversations.Updatable;
  users_conversations_messages: users_conversations_messages.Updatable;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.Updatable;
  users_conversations_participants: users_conversations_participants.Updatable;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.Updatable;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.Updatable;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.Updatable;
  users_devices: users_devices.Updatable;
  users_followers: users_followers.Updatable;
  users_live_streams_viewers: users_live_streams_viewers.Updatable;
  users_posts: users_posts.Updatable;
  users_posts_comments: users_posts_comments.Updatable;
  users_posts_comments_total: users_posts_comments_total.Updatable;
  users_posts_media: users_posts_media.Updatable;
  users_posts_reactions: users_posts_reactions.Updatable;
  users_posts_reactions_total: users_posts_reactions_total.Updatable;
  users_recorded_streams_viewers: users_recorded_streams_viewers.Updatable;
  users_streams_reactions: users_streams_reactions.Updatable;
  users_streams_reactions_total: users_streams_reactions_total.Updatable;
  users_topics: users_topics.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.UniqueIndex;
  call_history: call_history.UniqueIndex;
  deleted_users: deleted_users.UniqueIndex;
  faqs: faqs.UniqueIndex;
  online_users: online_users.UniqueIndex;
  reported_users: reported_users.UniqueIndex;
  stream_history: stream_history.UniqueIndex;
  topics: topics.UniqueIndex;
  users: users.UniqueIndex;
  users_activities: users_activities.UniqueIndex;
  users_activities_new_followers: users_activities_new_followers.UniqueIndex;
  users_activities_post_comments: users_activities_post_comments.UniqueIndex;
  users_activities_post_reactions: users_activities_post_reactions.UniqueIndex;
  users_activities_unread_count_total: users_activities_unread_count_total.UniqueIndex;
  users_blocklist: users_blocklist.UniqueIndex;
  users_conversations: users_conversations.UniqueIndex;
  users_conversations_messages: users_conversations_messages.UniqueIndex;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.UniqueIndex;
  users_conversations_participants: users_conversations_participants.UniqueIndex;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.UniqueIndex;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.UniqueIndex;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.UniqueIndex;
  users_devices: users_devices.UniqueIndex;
  users_followers: users_followers.UniqueIndex;
  users_live_streams_viewers: users_live_streams_viewers.UniqueIndex;
  users_posts: users_posts.UniqueIndex;
  users_posts_comments: users_posts_comments.UniqueIndex;
  users_posts_comments_total: users_posts_comments_total.UniqueIndex;
  users_posts_media: users_posts_media.UniqueIndex;
  users_posts_reactions: users_posts_reactions.UniqueIndex;
  users_posts_reactions_total: users_posts_reactions_total.UniqueIndex;
  users_recorded_streams_viewers: users_recorded_streams_viewers.UniqueIndex;
  users_streams_reactions: users_streams_reactions.UniqueIndex;
  users_streams_reactions_total: users_streams_reactions_total.UniqueIndex;
  users_topics: users_topics.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.Column;
  call_history: call_history.Column;
  deleted_users: deleted_users.Column;
  faqs: faqs.Column;
  online_users: online_users.Column;
  reported_users: reported_users.Column;
  stream_history: stream_history.Column;
  topics: topics.Column;
  users: users.Column;
  users_activities: users_activities.Column;
  users_activities_new_followers: users_activities_new_followers.Column;
  users_activities_post_comments: users_activities_post_comments.Column;
  users_activities_post_reactions: users_activities_post_reactions.Column;
  users_activities_unread_count_total: users_activities_unread_count_total.Column;
  users_blocklist: users_blocklist.Column;
  users_conversations: users_conversations.Column;
  users_conversations_messages: users_conversations_messages.Column;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.Column;
  users_conversations_participants: users_conversations_participants.Column;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.Column;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.Column;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.Column;
  users_devices: users_devices.Column;
  users_followers: users_followers.Column;
  users_live_streams_viewers: users_live_streams_viewers.Column;
  users_posts: users_posts.Column;
  users_posts_comments: users_posts_comments.Column;
  users_posts_comments_total: users_posts_comments_total.Column;
  users_posts_media: users_posts_media.Column;
  users_posts_reactions: users_posts_reactions.Column;
  users_posts_reactions_total: users_posts_reactions_total.Column;
  users_recorded_streams_viewers: users_recorded_streams_viewers.Column;
  users_streams_reactions: users_streams_reactions.Column;
  users_streams_reactions_total: users_streams_reactions_total.Column;
  users_topics: users_topics.Column;
}[T];

export type SQLForTable<T extends Table> = {
  allowed_reaction_lookup: allowed_reaction_lookup.SQL;
  call_history: call_history.SQL;
  deleted_users: deleted_users.SQL;
  faqs: faqs.SQL;
  online_users: online_users.SQL;
  reported_users: reported_users.SQL;
  stream_history: stream_history.SQL;
  topics: topics.SQL;
  users: users.SQL;
  users_activities: users_activities.SQL;
  users_activities_new_followers: users_activities_new_followers.SQL;
  users_activities_post_comments: users_activities_post_comments.SQL;
  users_activities_post_reactions: users_activities_post_reactions.SQL;
  users_activities_unread_count_total: users_activities_unread_count_total.SQL;
  users_blocklist: users_blocklist.SQL;
  users_conversations: users_conversations.SQL;
  users_conversations_messages: users_conversations_messages.SQL;
  users_conversations_messages_unread_count_total: users_conversations_messages_unread_count_total.SQL;
  users_conversations_participants: users_conversations_participants.SQL;
  users_conversations_participants_messages_reactions: users_conversations_participants_messages_reactions.SQL;
  users_conversations_participants_messages_reactions_total: users_conversations_participants_messages_reactions_total.SQL;
  users_conversations_participants_messages_statuses: users_conversations_participants_messages_statuses.SQL;
  users_devices: users_devices.SQL;
  users_followers: users_followers.SQL;
  users_live_streams_viewers: users_live_streams_viewers.SQL;
  users_posts: users_posts.SQL;
  users_posts_comments: users_posts_comments.SQL;
  users_posts_comments_total: users_posts_comments_total.SQL;
  users_posts_media: users_posts_media.SQL;
  users_posts_reactions: users_posts_reactions.SQL;
  users_posts_reactions_total: users_posts_reactions_total.SQL;
  users_recorded_streams_viewers: users_recorded_streams_viewers.SQL;
  users_streams_reactions: users_streams_reactions.SQL;
  users_streams_reactions_total: users_streams_reactions_total.SQL;
  users_topics: users_topics.SQL;
}[T];
